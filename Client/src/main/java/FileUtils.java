import common.FileMetadata;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;

public class FileUtils {

    public static Piece[] getOrderedPieces(File file, FileMetadata fileMetadata, int partNo, int totalParts) throws Exception {
        long partLengthInBytes = fileMetadata.size / totalParts;
        long piecesInPart = partLengthInBytes / Piece.DEFAULT_PIECE_DATA_LEN;
        int pieceIdx = (int) ((partNo - 1) * piecesInPart);
        int byteArrStartingIdx = (int) (partLengthInBytes * (partNo-1));
        System.out.println("PartNo" + partNo);
        System.out.println(String.format("partLen: %d pieces in part: %d piece idx: %d byteArrstarting: %d ", partLengthInBytes, piecesInPart, pieceIdx, byteArrStartingIdx));
        System.out.println(String.format("%d %d %d %d", partLengthInBytes, piecesInPart, pieceIdx, byteArrStartingIdx));
        if (partNo == totalParts) {
            return getRemainingPieces(file, fileMetadata, byteArrStartingIdx, pieceIdx);
        }
        int byteArrEndingIdx = (int) (byteArrStartingIdx + partLengthInBytes -1);
        byte[] fileContent = getBytes(file, byteArrStartingIdx, byteArrEndingIdx);
        Piece[] pieces = splitToPieces(fileMetadata, fileContent, pieceIdx, piecesInPart);
        System.out.println("generated: " + pieces.length);
        return pieces;
    }

    public static Piece[] getRemainingPieces(File file, FileMetadata fileMetadata, int byteArrStartingIdx, int pieceIdx) throws Exception {
        int byteArrEndingIdx= (int) fileMetadata.size;
        byte[] fileContent = getBytes(file, byteArrStartingIdx, byteArrEndingIdx);
        return splitToPieces(fileMetadata, fileContent, pieceIdx, (fileContent.length/Piece.DEFAULT_PIECE_DATA_LEN )+1);
    }

    private static byte[] getBytes(File file, int fileContentStartingIdx, int fileContentEndingIdx) throws Exception {
        RandomAccessFile randomAccessFile = new RandomAccessFile(file, "r");
        byte[] fileContent = new byte[fileContentEndingIdx - fileContentStartingIdx];
        randomAccessFile.read(fileContent, fileContentStartingIdx, fileContentEndingIdx -1 );
        System.out.println("generated byte arr of len: " + fileContent.length);
        return fileContent;
    }

    private static Piece[] splitToPieces(FileMetadata fileMetadata, byte[] bytes, int pieceIdx, long piecesInPart) {
        Piece[] pieces = new Piece[(int) piecesInPart];
        System.out.println("Will return: " + pieces.length + "pieces");
        for (int i=0; i<piecesInPart; i++) {
            pieces[i] = new Piece(fileMetadata, pieceIdx, Arrays.copyOfRange(bytes, i*Piece.DEFAULT_PIECE_DATA_LEN, i*Piece.DEFAULT_PIECE_DATA_LEN + Piece.DEFAULT_PIECE_DATA_LEN));
            System.out.println("Created piece with data: " + pieces[i].data.toString());
            pieceIdx++;
        }
        return pieces;
    }

    public static void assembleFileFromPieces(Piece[] pieces, String path) throws Exception {
        byte[] fileContent;
        long allPiecesLen = 0;
        int idx=0;
        for (Piece piece : pieces) {
            if (piece != null) {
                allPiecesLen += piece.data.length;
            }
        }
        fileContent = new byte[(int)allPiecesLen];
        for (Piece piece : pieces) {
            if (piece != null) {
                for (byte b : piece.data) {
                    if (b == 0) {
                        break;
                    }
                    fileContent[idx++] = b;
                }
            } else {
                break;
            }
        }
        byteArrToFile(fileContent, path);
    }

    public static void byteArrToFile(byte[] fileContent, String filePath) throws Exception {
        createFile(filePath);
        FileOutputStream fos = new FileOutputStream(filePath);
        fos.write(fileContent);
    }


    public static void createFile(String path) throws IOException {
        File f = new File(path);
        if (!f.exists()) {
            Files.createFile(Paths.get(path));
        }
    }

    public static FileMetadata getFileMetadata(File file) {
        return new FileMetadata(file);
    }
}
